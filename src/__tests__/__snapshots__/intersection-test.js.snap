// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`intersection 1`] = `
"\\"use strict\\";

var _propTypes = require(\\"prop-types\\");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\"this hasn't been initialised - super() hasn't been called\\"); } return call && (typeof call === \\"object\\" || typeof call === \\"function\\") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== \\"function\\" && superClass !== null) { throw new TypeError(\\"Super expression must either be null or a function, not \\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

MyComponent.propTypes = {
    someProp: function someProp(props, propName, componentName) {
        if (!Object.prototype.hasOwnProperty.call(props, propName)) {
            throw new Error(\\"Prop \`\\" + propName + \\"\` has type 'any' or 'mixed', but was not provided to \`\\" + componentName + \\"\`. Pass undefined or any other value.\\");
        }
    }
};

function () {
    var MyComponent = function (_React$Component) {
        _inherits(MyComponent, _React$Component);

        function MyComponent() {
            _classCallCheck(this, MyComponent);

            return _possibleConstructorReturn(this, (MyComponent.__proto__ || Object.getPrototypeOf(MyComponent)).apply(this, arguments));
        }

        return MyComponent;
    }(React.Component);
}()"
`;
